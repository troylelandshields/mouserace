//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace Maze2SL5.ServiceReferenceDB {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="clsRace", Namespace="http://schemas.datacontract.org/2004/07/Maze2SL5.Web")]
    public partial class clsRace : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string Maze_ComputerField;
        
        private string Maze_HashGroupField;
        
        private string Maze_MaxLevelField;
        
        private string Maze_MouseField;
        
        private string Maze_NameField;
        
        private string Maze_OSField;
        
        private int Maze_TimeField;
        
        private int Race_IDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Maze_Computer {
            get {
                return this.Maze_ComputerField;
            }
            set {
                if ((object.ReferenceEquals(this.Maze_ComputerField, value) != true)) {
                    this.Maze_ComputerField = value;
                    this.RaisePropertyChanged("Maze_Computer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Maze_HashGroup {
            get {
                return this.Maze_HashGroupField;
            }
            set {
                if ((object.ReferenceEquals(this.Maze_HashGroupField, value) != true)) {
                    this.Maze_HashGroupField = value;
                    this.RaisePropertyChanged("Maze_HashGroup");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Maze_MaxLevel {
            get {
                return this.Maze_MaxLevelField;
            }
            set {
                if ((object.ReferenceEquals(this.Maze_MaxLevelField, value) != true)) {
                    this.Maze_MaxLevelField = value;
                    this.RaisePropertyChanged("Maze_MaxLevel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Maze_Mouse {
            get {
                return this.Maze_MouseField;
            }
            set {
                if ((object.ReferenceEquals(this.Maze_MouseField, value) != true)) {
                    this.Maze_MouseField = value;
                    this.RaisePropertyChanged("Maze_Mouse");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Maze_Name {
            get {
                return this.Maze_NameField;
            }
            set {
                if ((object.ReferenceEquals(this.Maze_NameField, value) != true)) {
                    this.Maze_NameField = value;
                    this.RaisePropertyChanged("Maze_Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Maze_OS {
            get {
                return this.Maze_OSField;
            }
            set {
                if ((object.ReferenceEquals(this.Maze_OSField, value) != true)) {
                    this.Maze_OSField = value;
                    this.RaisePropertyChanged("Maze_OS");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Maze_Time {
            get {
                return this.Maze_TimeField;
            }
            set {
                if ((this.Maze_TimeField.Equals(value) != true)) {
                    this.Maze_TimeField = value;
                    this.RaisePropertyChanged("Maze_Time");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Race_ID {
            get {
                return this.Race_IDField;
            }
            set {
                if ((this.Race_IDField.Equals(value) != true)) {
                    this.Race_IDField = value;
                    this.RaisePropertyChanged("Race_ID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="www.troylelandshields.me", ConfigurationName="ServiceReferenceDB.ServiceDB")]
    public interface ServiceDB {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="www.troylelandshields.me/ServiceDB/getRaces", ReplyAction="www.troylelandshields.me/ServiceDB/getRacesResponse")]
        System.IAsyncResult BegingetRaces(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Maze2SL5.ServiceReferenceDB.clsRace> EndgetRaces(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="www.troylelandshields.me/ServiceDB/getHashRaces", ReplyAction="www.troylelandshields.me/ServiceDB/getHashRacesResponse")]
        System.IAsyncResult BegingetHashRaces(string hashtag, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Maze2SL5.ServiceReferenceDB.clsRace> EndgetHashRaces(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="www.troylelandshields.me/ServiceDB/addRace", ReplyAction="www.troylelandshields.me/ServiceDB/addRaceResponse")]
        System.IAsyncResult BeginaddRace(Maze2SL5.ServiceReferenceDB.clsRace r, System.AsyncCallback callback, object asyncState);
        
        void EndaddRace(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ServiceDBChannel : Maze2SL5.ServiceReferenceDB.ServiceDB, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getRacesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getRacesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Maze2SL5.ServiceReferenceDB.clsRace> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Maze2SL5.ServiceReferenceDB.clsRace>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getHashRacesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getHashRacesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Maze2SL5.ServiceReferenceDB.clsRace> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Maze2SL5.ServiceReferenceDB.clsRace>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceDBClient : System.ServiceModel.ClientBase<Maze2SL5.ServiceReferenceDB.ServiceDB>, Maze2SL5.ServiceReferenceDB.ServiceDB {
        
        private BeginOperationDelegate onBegingetRacesDelegate;
        
        private EndOperationDelegate onEndgetRacesDelegate;
        
        private System.Threading.SendOrPostCallback ongetRacesCompletedDelegate;
        
        private BeginOperationDelegate onBegingetHashRacesDelegate;
        
        private EndOperationDelegate onEndgetHashRacesDelegate;
        
        private System.Threading.SendOrPostCallback ongetHashRacesCompletedDelegate;
        
        private BeginOperationDelegate onBeginaddRaceDelegate;
        
        private EndOperationDelegate onEndaddRaceDelegate;
        
        private System.Threading.SendOrPostCallback onaddRaceCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public ServiceDBClient() {
        }
        
        public ServiceDBClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceDBClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceDBClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceDBClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<getRacesCompletedEventArgs> getRacesCompleted;
        
        public event System.EventHandler<getHashRacesCompletedEventArgs> getHashRacesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> addRaceCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Maze2SL5.ServiceReferenceDB.ServiceDB.BegingetRaces(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetRaces(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<Maze2SL5.ServiceReferenceDB.clsRace> Maze2SL5.ServiceReferenceDB.ServiceDB.EndgetRaces(System.IAsyncResult result) {
            return base.Channel.EndgetRaces(result);
        }
        
        private System.IAsyncResult OnBegingetRaces(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((Maze2SL5.ServiceReferenceDB.ServiceDB)(this)).BegingetRaces(callback, asyncState);
        }
        
        private object[] OnEndgetRaces(System.IAsyncResult result) {
            System.Collections.Generic.List<Maze2SL5.ServiceReferenceDB.clsRace> retVal = ((Maze2SL5.ServiceReferenceDB.ServiceDB)(this)).EndgetRaces(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetRacesCompleted(object state) {
            if ((this.getRacesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getRacesCompleted(this, new getRacesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getRacesAsync() {
            this.getRacesAsync(null);
        }
        
        public void getRacesAsync(object userState) {
            if ((this.onBegingetRacesDelegate == null)) {
                this.onBegingetRacesDelegate = new BeginOperationDelegate(this.OnBegingetRaces);
            }
            if ((this.onEndgetRacesDelegate == null)) {
                this.onEndgetRacesDelegate = new EndOperationDelegate(this.OnEndgetRaces);
            }
            if ((this.ongetRacesCompletedDelegate == null)) {
                this.ongetRacesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetRacesCompleted);
            }
            base.InvokeAsync(this.onBegingetRacesDelegate, null, this.onEndgetRacesDelegate, this.ongetRacesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Maze2SL5.ServiceReferenceDB.ServiceDB.BegingetHashRaces(string hashtag, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetHashRaces(hashtag, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<Maze2SL5.ServiceReferenceDB.clsRace> Maze2SL5.ServiceReferenceDB.ServiceDB.EndgetHashRaces(System.IAsyncResult result) {
            return base.Channel.EndgetHashRaces(result);
        }
        
        private System.IAsyncResult OnBegingetHashRaces(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string hashtag = ((string)(inValues[0]));
            return ((Maze2SL5.ServiceReferenceDB.ServiceDB)(this)).BegingetHashRaces(hashtag, callback, asyncState);
        }
        
        private object[] OnEndgetHashRaces(System.IAsyncResult result) {
            System.Collections.Generic.List<Maze2SL5.ServiceReferenceDB.clsRace> retVal = ((Maze2SL5.ServiceReferenceDB.ServiceDB)(this)).EndgetHashRaces(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetHashRacesCompleted(object state) {
            if ((this.getHashRacesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getHashRacesCompleted(this, new getHashRacesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getHashRacesAsync(string hashtag) {
            this.getHashRacesAsync(hashtag, null);
        }
        
        public void getHashRacesAsync(string hashtag, object userState) {
            if ((this.onBegingetHashRacesDelegate == null)) {
                this.onBegingetHashRacesDelegate = new BeginOperationDelegate(this.OnBegingetHashRaces);
            }
            if ((this.onEndgetHashRacesDelegate == null)) {
                this.onEndgetHashRacesDelegate = new EndOperationDelegate(this.OnEndgetHashRaces);
            }
            if ((this.ongetHashRacesCompletedDelegate == null)) {
                this.ongetHashRacesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetHashRacesCompleted);
            }
            base.InvokeAsync(this.onBegingetHashRacesDelegate, new object[] {
                        hashtag}, this.onEndgetHashRacesDelegate, this.ongetHashRacesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Maze2SL5.ServiceReferenceDB.ServiceDB.BeginaddRace(Maze2SL5.ServiceReferenceDB.clsRace r, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginaddRace(r, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Maze2SL5.ServiceReferenceDB.ServiceDB.EndaddRace(System.IAsyncResult result) {
            base.Channel.EndaddRace(result);
        }
        
        private System.IAsyncResult OnBeginaddRace(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Maze2SL5.ServiceReferenceDB.clsRace r = ((Maze2SL5.ServiceReferenceDB.clsRace)(inValues[0]));
            return ((Maze2SL5.ServiceReferenceDB.ServiceDB)(this)).BeginaddRace(r, callback, asyncState);
        }
        
        private object[] OnEndaddRace(System.IAsyncResult result) {
            ((Maze2SL5.ServiceReferenceDB.ServiceDB)(this)).EndaddRace(result);
            return null;
        }
        
        private void OnaddRaceCompleted(object state) {
            if ((this.addRaceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.addRaceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void addRaceAsync(Maze2SL5.ServiceReferenceDB.clsRace r) {
            this.addRaceAsync(r, null);
        }
        
        public void addRaceAsync(Maze2SL5.ServiceReferenceDB.clsRace r, object userState) {
            if ((this.onBeginaddRaceDelegate == null)) {
                this.onBeginaddRaceDelegate = new BeginOperationDelegate(this.OnBeginaddRace);
            }
            if ((this.onEndaddRaceDelegate == null)) {
                this.onEndaddRaceDelegate = new EndOperationDelegate(this.OnEndaddRace);
            }
            if ((this.onaddRaceCompletedDelegate == null)) {
                this.onaddRaceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnaddRaceCompleted);
            }
            base.InvokeAsync(this.onBeginaddRaceDelegate, new object[] {
                        r}, this.onEndaddRaceDelegate, this.onaddRaceCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Maze2SL5.ServiceReferenceDB.ServiceDB CreateChannel() {
            return new ServiceDBClientChannel(this);
        }
        
        private class ServiceDBClientChannel : ChannelBase<Maze2SL5.ServiceReferenceDB.ServiceDB>, Maze2SL5.ServiceReferenceDB.ServiceDB {
            
            public ServiceDBClientChannel(System.ServiceModel.ClientBase<Maze2SL5.ServiceReferenceDB.ServiceDB> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BegingetRaces(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("getRaces", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<Maze2SL5.ServiceReferenceDB.clsRace> EndgetRaces(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<Maze2SL5.ServiceReferenceDB.clsRace> _result = ((System.Collections.Generic.List<Maze2SL5.ServiceReferenceDB.clsRace>)(base.EndInvoke("getRaces", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegingetHashRaces(string hashtag, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = hashtag;
                System.IAsyncResult _result = base.BeginInvoke("getHashRaces", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<Maze2SL5.ServiceReferenceDB.clsRace> EndgetHashRaces(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<Maze2SL5.ServiceReferenceDB.clsRace> _result = ((System.Collections.Generic.List<Maze2SL5.ServiceReferenceDB.clsRace>)(base.EndInvoke("getHashRaces", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginaddRace(Maze2SL5.ServiceReferenceDB.clsRace r, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = r;
                System.IAsyncResult _result = base.BeginInvoke("addRace", _args, callback, asyncState);
                return _result;
            }
            
            public void EndaddRace(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("addRace", _args, result);
            }
        }
    }
}
